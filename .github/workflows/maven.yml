name: Java CI with Maven

on:
  push:
    branches: [ "developer" ]  # Executa quando houver push na branch 'main'
  pull_request:
    branches: [ "developer" ]  # Executa quando houver pull request na branch 'main'

jobs:
  # Job para construir o projeto Java com Maven
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1010
          POSTGRES_DB: greenLearning
        options: --health-cmd="pg_isready -U postgres" --health-timeout=30s --health-start-period=5s --health-retries=5

    steps:
      - name: Check out repository
        uses: actions/checkout@v2  # Faz checkout do código do repositório

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven  # Cache de dependências do Maven

      - name: Build with Maven
        run: mvn clean package --file pom.xml  # Compila o projeto com Maven

      - name: Run unit tests
        run: mvn test -e  # Executa os testes unitários

  # Job para build e push da imagem Docker
  build-and-push:
    needs: build  # Depende do job 'build'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Faz o checkout do código no repositório

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t arthurbusanello/backend-app:latest .  # Altere o nome da imagem para refletir o backend

      - name: Push Docker image
        run: docker push arthurbusanello/backend-app:latest  # Faz o push da imagem para o Docker Hub

  # Job de deploy para a VM via SSH
  deploy:
    needs: build-and-push  # Depende do job 'build-and-push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  # Faz o checkout do código no repositório

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3  # Configura o SSH Agent com a chave privada
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Usando o segredo com a chave privada

      - name: SSH into VM using backpipeline credentials
        run: |
          # Conectar via SSH e executar comandos na VM
          ssh -o StrictHostKeyChecking=no backpipeline@35.211.244.181 "
            # Navegar para o diretório da aplicação
            cd /home/emili/~/backend || exit 1;
          
            # Parar e remover containers antigos (caso use Docker)
            docker-compose down || exit 1;
          
            # Subir os containers novamente com a versão mais recente
            docker-compose up -d || exit 1;
          
            echo 'Deploy concluído com sucesso!'
          "